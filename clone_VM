#!/bin/bash
#Provide the subscription Id
subscriptionId=""
VMName=""
resourceGroupName=""
usage()
{
  echo "-s <subscriptionid> -n <vmname> -g <resourcegroup> [ -d destinationrg ] [ -c vm_clone_new_name ] [ -t  tags ] [ -v VNET ] [ -l SUBNET (lan) ]"
  echo "get names from" 
  echo "    az vm list --output json | jq '.[].name'"
}
while getopts "hs:n:g:c:d:v:t:l:" arg; do
  case $arg in
    h)
      echo "usage" 
      usage
      ;;
    s)
      subscriptionId=$OPTARG
      ;;

    n)
      VMName=$OPTARG
      ;;

    g)
      resourceGroupName=$OPTARG
      ;;
    d)
      destResourceGroupName=$OPTARG
      ;;
    c) 
      VMNameNew=$OPTARG
      ;;
    t)
      TAGS="--tags $OPTARG"
      ;;
    l)
      SUBNET="--subnet $OPTARG"
      ;;
    v) 
      VNET="--vnet-name $OPTARG"
      ;;

  esac
done

if [ -z "$subscriptionId" ]   || [ -z "$VMName" ] || [ -z "$resourceGroupName" ] 
  then
	  usage
  exit 1
fi
echo "$destResourceGroupName"

if [ -z "$destResourceGroupName" ] 
then
  destResourceGroupName=$resourceGroupName
  echo "WARNING, creating VM in same resourcegroup, ctrl+c exit  $destResourceGroupName"
  read
fi
if [ -z "$VMNameNew" ] 
then
  VMNameNew="${VMName}-new"
  echo "WARNING, creating VM with name $VMNameNew, ctrl+c exit"
  read
fi

LOCATION="$(az vm show --name ${VMName}  -g ${resourceGroupName} | jq  -r '.location')"
az group show -g $destResourceGroupName > /dev/null 2>&1
if  [ $? -ne 0 ]
then
	echo "Dstination resourgce group does not exist, create in region with"
        echo az group create --name "${destResourceGroupName}" --location "${LOCATION}"
fi

clone_disk()
{
    diskID="$1"
    SUFFIX="$2"
    resourceGroupName="$3"
    destResourceGroupName="$4"

    sourceDiskName="$(echo $diskID | sed 's|.*/||')"
    snapshotName="${sourceDiskName}-snap-$SUFFIX"
    diskName="${sourceDiskName}-$SUFFIX"
  
    echo az snapshot create \
      -g "${resourceGroupName}" \
  	--source "$diskID" \
  	--name "$snapshotName"
    az snapshot create \
      -g "${resourceGroupName}" \
  	--source "$diskID" \
  	--name "$snapshotName"
    
    snapshotID=$(az snapshot show --name "$snapshotName" -g "${resourceGroupName}"  | jq -r '.id')
    echo $snapshotID
    #Provide the size of the disks in GB. It should be greater than the VHD file size.  
    diskSize=$(az disk show --ids $diskID | jq -r '.diskSizeGB')
    diskSkuName=$(az disk show --ids $diskID | jq -r '.sku.name')
    #diskSkuTier=$(az disk show --ids $diskID | jq '.sku.tier')
    #Provide the URI of the VHD file that will be used to create Managed Disk. 
  
  
  

  
    #If you're creating an OS disk, uncomment the following lines and replace the values

  
    echo az disk create --resource-group $destResourceGroupName --name $diskName --sku $diskSkuName --size-gb $diskSize --source $snapshotID
    az disk create --resource-group $destResourceGroupName --name $diskName --sku $diskSkuName --size-gb $diskSize --source $snapshotID
    NEWDISKNAME=$diskName
    SNAPSHOTS="$SNAPSHOTS $snapshotID"
}

attach_disk()
{
   diskName=$1
   VM=$2
   resourceGroup=$3
   diskId=$(az disk show -g $resourceGroup -n "$diskName" --query 'id' -o tsv)
   az vm disk attach -g $resourceGroup --vm-name "$VM" --name $diskId
}
nsg()
{
 
   SOURCENICID=$1
   SOURCERG=$2
   NEWNAME=$3
   NEWRG=$4
   SOURCENSGID=$(az network nic show --id "$INTFID" --query networkSecurityGroup.id -otsv)
   
   echo az group export -g $SOURCERG  --resource-ids $SOURCENSGID
   az group export -g $SOURCERG  --resource-ids $SOURCENSGID > /tmp/nsgtemplate.json
   lenparam=$(cat /tmp/nsgtemplate.json | jq '.parameters | keys | length')
   if [ -z "$lenparam" ] || [ "$lenparam" -ne 1 ]
   then
	   echo something unexpected occured in /tmp/nsgtemplate.json
	   exit 1
   fi
   paramname=$(cat /tmp/nsgtemplate.json | jq -r '.parameters | keys[0]')
   echo az deployment group create --resource-group $NEWRG  --template-file /tmp/nsgtemplate.json  --parameters "$paramname"="$NEWNAME"
   az deployment group create --resource-group $NEWRG  --template-file /tmp/nsgtemplate.json  --parameters "$paramname"="$NEWNAME"
   /bin/rm /tmp/nsgtemplate.json

}
#Provide the name of your resource group.
#Ensure that resource group is already created 

#Set the context to the subscription Id where Managed Disk will be created
az account set --subscription "$subscriptionId"
NOW="$(date +%Y%m%d-%H%M)"


OSDISK="$(az vm show --name  ${VMName}  -g ${resourceGroupName} | jq -r  '.storageProfile.osDisk.managedDisk.id')"



osType='Linux' #Acceptable values are either Windows or Linux
hyperVGeneration='v2' #Acceptable values are either v1 or v2
#other settings
size=$(az vm show -n "${VMName}"  -g "${resourceGroupName}" --query "[hardwareProfile.vmSize]" -otsv)
INTFID=$(az vm show -n "${VMName}"  -g "${resourceGroupName}"  --query "networkProfile.networkInterfaces[0].id" -otsv)
IPFORWARD=$(az network nic show --id "$INTFID" --query enableIPForwarding)
PUBIP=$(az vm show -n "${VMName}"  -g "${resourceGroupName}"  --query "ipConfigurations.publicIPAddress" -otsv)
if [ -z "PUBIP" ]; then
	PUBLICIP="--public-ip-address ''"
fi
NEWNSG="${VMNameNew}_nsg"


nsg $INTFID $resourceGroupName "$NEWNSG" "$destResourceGroupName"

NEWDISKNAME=""
clone_disk "$OSDISK" "$NOW" "$resourceGroupName" "$destResourceGroupName"
echo $NEWDISKNAME
echo az vm create --name ${VMNameNew} --resource-group $destResourceGroupName --attach-os-disk $diskName --os-type $osType --size $size $PUBLICIP $TAGS $VNET $SUBNET --nsg "$NEWNSG"
az vm create --name ${VMNameNew} --resource-group $destResourceGroupName --attach-os-disk $diskName --os-type $osType --size $size $PUBLICIP $TAGS $VNET $SUBNET --nsg "$NEWNSG"
#subnet and ipforward

DISKS="$(az vm show --name  "${VMName}"  -g ${resourceGroupName} | jq  -r '.storageProfile.dataDisks[].managedDisk.id')" 
for diskID in $DISKS; do 
        NEWDISKNAME=""
	clone_disk "$diskID" "$NOW" "$resourceGroupName" "$destResourceGroupName"
	attach_disk "$NEWDISKNAME"  "${VMNameNew}" "$destResourceGroupName"
done

NEWINTFID=$(az vm show -n "${VMNameNew}"  -g "${destResourceGroupName}"  --query "networkProfile.networkInterfaces[0].id" -otsv)
az network nic update --id "$NEWINTFID" --ip-forwarding "$IPFORWARD"

sleep 10
#one at  time
#https://github.com/Azure/azure-cli/issues/19597
for SNAPSHOT in $SNAPSHOTS 
do
  echo az snapshot delete --ids "$SNAPSHOT"  #-g "$destResourceGroupName"
  az snapshot delete --ids "$SNAPSHOT" #-g "$destResourceGroupName"
done



